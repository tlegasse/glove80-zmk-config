
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    
macros {
    copy: copy {
        label = "copy";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp I>
          , <&macro_release &kp LCTRL>
        ;
    };
    paste: paste {
        label = "paste";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp GT>
          , <&macro_release &kp LCTRL>
        ;
    };
    cut: cut {
        label = "cut";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp B>
          , <&macro_release &kp LCTRL>
        ;
    };
    word: word {
        label = "word";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp RIGHT>
          , <&macro_release &kp LCTRL>
        ;
    };
    back: back {
        label = "backw";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp LEFT>
          , <&macro_release &kp LCTRL>
        ;
    };
    undo: undo {
        label = "undo";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp SLASH>
          , <&macro_release &kp LCTRL>
        ;
    };
    redo: redo {
        label = "redo";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp T>
          , <&macro_release &kp LCTRL>
        ;
    };
    find: find {
        label = "find";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp Y>
          , <&macro_release &kp LCTRL>
        ;
    };
    selectall: selectall {
        label = "selectall";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp A>
          , <&macro_release &kp LCTRL>
        ;
    };
    browsern: browsern {
        label = "browsern";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp PG_DN>
          , <&macro_release &kp LCTRL>
        ;
    };
    browserp: browserp {
        label = "browserp";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp PG_UP>
          , <&macro_release &kp LCTRL>
        ;
    };
    browsermn: browsermn {
        label = "browsermn";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LC(LSHIFT)>
          , <&macro_tap &kp PG_DN>
          , <&macro_release &kp LC(LSHIFT)>
        ;
    };
    browsermp: browsermp {
        label = "browsermp";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LC(LSHIFT)>
          , <&macro_tap &kp PG_UP>
          , <&macro_release &kp LC(LSHIFT)>
        ;
    };
    browseri: browseri {
        label = "browseri";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LC(LSHIFT)>
          , <&macro_tap &kp G>
          , <&macro_release &kp LC(LSHIFT)>
        ;
    };
    browseru: browseru {
        label = "browseru";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LC(LSHIFT)>
          , <&macro_tap &kp K>
          , <&macro_release &kp LC(LSHIFT)>
        ;
    };
    browserx: browserx {
        label = "browserx";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <6>;
        tap-ms = <6>;
        bindings 
          = <&macro_press &kp LCTRL>
          , <&macro_tap &kp COMMA>
          , <&macro_release &kp LCTRL>
        ;
    };
};

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
     &kp F1   &kp F2   &kp F3    &kp F4  &kp F5                                                                                        &kp F6     &kp F7    &kp F8      &kp F9    &kp F10
     &kp N1   &kp N2   &kp N3    &kp N4  &kp N5  &kp N6                                                                      &kp N7    &kp N8     &kp N9    &kp N0   &kp MINUS  &kp EQUAL
  &kp GRAVE    &kp Q    &kp W     &kp E   &kp R   &kp T                                                                       &kp Y     &kp U      &kp I     &kp O       &kp P   &kp RBKT
   &kp BSPC  &lt 3 A  &lt 5 S   &lt 4 D   &kp F   &kp G                                                                       &kp H     &kp J      &kp K     &kp L  &lt 1 SEMI    &kp SQT
    &kp TAB    &kp Z    &kp X     &kp C   &kp V   &kp B  &kp LCTRL    &kp DEL    &lower  &kp RSHFT  &kp LCTRL       &kp ESC   &kp N     &kp M  &kp COMMA   &kp DOT    &kp FSLH   &kp LBKT
 &magic 2 0    &none   &kp N6  &kp DOWN  &kp UP          &kp SPACE  &kp LSHFT  &kp LALT   &kp RALT      &mo 1  &mt LGUI RET          &kp LEFT  &kp RIGHT  &kp BSLH       &to 1      &none
            >;
        };

        layer_Lower {
            bindings = <
     &trans  &trans  &trans  &trans  &trans                                                                         &trans     &trans      &trans  &trans  &trans
     &trans  &trans  &trans  &trans  &trans  &trans                                                      &trans     &trans     &trans      &trans  &trans  &trans
     &trans  &trans  &trans  &trans  &trans  &trans                                                       &none  &kp KP_N1  &kp KP_N2   &kp KP_N3  &trans  &trans
     &trans  &trans  &trans  &trans  &trans  &trans                                                  &kp KP_NUM  &kp KP_N4  &kp KP_N5   &kp KP_N6  &trans  &trans
     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &to 0       &none  &kp KP_N7  &kp KP_N8   &kp KP_N9  &trans  &trans
 &magic 2 0  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans              &kp KP_N0  &kp KP_N0  &kp KP_DOT   &to 0  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Vim {
            bindings = <
  &trans  &trans    &trans      &trans     &trans                                                                    &trans   &trans     &trans     &trans    &trans
  &trans  &trans    &trans      &trans     &trans  &trans                                                  &trans    &trans   &trans     &trans     &trans    &trans
 &kp END  &trans  &kp HOME     &kp END     &paste   &copy                                                  &trans    &trans   &trans      &redo  &kp RIGHT  &kp HOME
  &trans  &trans    &trans  &selectall      &undo  &trans                                                    &cut  &kp LEFT   &trans     &trans     &trans     &find
  &trans  &trans    &trans    &kp DOWN     &kp UP    &cut  &trans  &trans  &trans  &trans  &trans  &trans   &back    &trans    &word  &kp LSHFT     &trans    &trans
  &trans  &trans    &trans   &kp PG_DN  &kp PG_UP          &trans  &trans  &trans  &trans  &trans  &trans          &kp HOME  &kp END     &trans     &trans    &trans
            >;
        };

        layer_Browser {
            bindings = <
 &trans  &trans  &trans  &trans     &trans                                                                           &trans  &trans  &trans     &trans  &trans
 &trans  &trans  &trans  &trans     &trans     &trans                                                     &trans     &trans  &trans  &trans     &trans  &trans
 &trans  &trans  &trans  &trans     &trans     &trans                                                     &trans     &trans  &trans  &trans  &browsern  &trans
 &trans  &trans  &trans  &trans  &browseru  &browseri                                                  &browserx  &browserp  &trans  &trans     &trans  &trans
 &trans  &trans  &trans  &trans     &trans  &browserx  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans     &trans  &trans
 &trans  &trans  &trans  &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans                &trans  &trans  &trans     &trans  &trans
            >;
        };

        layer_Media {
            bindings = <
 &trans  &trans  &trans        &trans        &trans                                                                        &trans  &trans  &trans      &trans  &trans
 &trans  &trans  &trans        &trans        &trans  &trans                                                    &trans      &trans  &trans  &trans      &trans  &trans
 &trans  &trans  &trans        &trans        &trans  &trans                                                    &trans      &trans  &trans  &trans  &kp K_NEXT  &trans
 &trans  &trans  &trans        &trans        &trans  &trans                                                    &trans  &kp K_PREV  &trans  &trans      &trans  &trans
 &trans  &trans  &trans  &kp K_VOL_DN  &kp K_VOL_UP  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans      &trans  &trans
 &trans  &trans  &trans        &trans        &trans          &kp K_PP  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans      &trans  &trans
            >;
        };

    };
};
